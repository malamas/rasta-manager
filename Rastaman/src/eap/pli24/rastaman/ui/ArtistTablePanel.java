package eap.pli24.rastaman.ui;

import eap.pli24.rastaman.entities.Artist;
import eap.pli24.rastaman.ui.tablecellrenderers.TableCellRendererFactory;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.Beans;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableColumnModel;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.SwingBindings;

/**
 *
 * @author Malamas Malamidis
 * @author Apostolis Iakovakis
 */
public class ArtistTablePanel extends javax.swing.JPanel {

    /**
     * Creates new form ArtistTablePanel
     */
    public ArtistTablePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        localEm = em;
        artistQuery = Beans.isDesignTime() ? null : localEm.createQuery("SELECT a FROM Artist a");
        artistList = Beans.isDesignTime() ? Collections.emptyList() : artistQuery.getResultList();
        jScrollPane2 = new JScrollPane();
        artistTable = new JTable();
        headerLabel = new JLabel();
        buttonPanel = new JPanel();
        newButton = new JButton();
        editButton = new JButton();
        deleteButton = new JButton();
        backButton = new JButton();

        setLayout(new BorderLayout());

        artistTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        artistTable.getTableHeader().setReorderingAllowed(false);

        JTableBinding jTableBinding = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ_WRITE, artistList, artistTable);
        JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${firstname}"));
        columnBinding.setColumnName("Όνομα");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${lastname}"));
        columnBinding.setColumnName("Επίθετο");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${artisticname}"));
        columnBinding.setColumnName("Καλιτεχνικό Όνομα");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${sex}"));
        columnBinding.setColumnName("Φύλο");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${birthday}"));
        columnBinding.setColumnName("Ημ. Γέννησης");
        columnBinding.setColumnClass(Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${birthplace}"));
        columnBinding.setColumnName("Τόπος Γέννησης");
        columnBinding.setColumnClass(Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${muscigenreid.name}"));
        columnBinding.setColumnName("Είδος Μουσικής");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(artistTable);

        add(jScrollPane2, BorderLayout.CENTER);

        headerLabel.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        headerLabel.setText("Καλλιτέχνες");
        headerLabel.setPreferredSize(new Dimension(0, 30));
        add(headerLabel, BorderLayout.PAGE_START);

        newButton.setIcon(new ImageIcon(getClass().getResource("/eap/pli24/rastaman/resources/images/adduser22.png"))); // NOI18N
        newButton.setText("Εισαγωγή");
        newButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        editButton.setIcon(new ImageIcon(getClass().getResource("/eap/pli24/rastaman/resources/images/edit22.png"))); // NOI18N
        editButton.setText("Επεξεργασία");
        editButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(new ImageIcon(getClass().getResource("/eap/pli24/rastaman/resources/images/deleteuser22.png"))); // NOI18N
        deleteButton.setText("Διαγραφή");
        deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(new ImageIcon(getClass().getResource("/eap/pli24/rastaman/resources/images/home22.png"))); // NOI18N
        backButton.setPreferredSize(new Dimension(80, 23));
        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        GroupLayout buttonPanelLayout = new GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(buttonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addComponent(newButton)
                .addGap(5, 5, 5)
                .addComponent(editButton)
                .addGap(5, 5, 5)
                .addComponent(deleteButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 437, Short.MAX_VALUE)
                .addComponent(backButton, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
        );
        buttonPanelLayout.setVerticalGroup(buttonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(buttonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(newButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton)
                    .addComponent(backButton, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)))
        );

        add(buttonPanel, BorderLayout.PAGE_END);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void newButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        controller.showArtistEditor(new Artist());
    }//GEN-LAST:event_newButtonActionPerformed

    private void editButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int selectedIndex = artistTable.getSelectedRow();
        if (selectedIndex != -1) {
            Artist selectedArtist = artistList.get(selectedIndex);
            controller.showArtistEditor(selectedArtist);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
            int selectedIndex = artistTable.getSelectedRow();
            if (selectedIndex == -1) {
                throw new Exception("Δεν Επιλέχθηκε Καλλιτέχνης");
            }
            Artist a = artistList.get(selectedIndex);
            if (a.getAlbumList().isEmpty()) {
                if (a.getMusicgroupList().isEmpty()) {
                    Object[] options = {"Ναι",
                        "Όχι"};
                    int n = JOptionPane.showOptionDialog(new JFrame(),
                            "Να διαγραφεί ο Καλιτέχνης" + a.getLastname() + " " + a.getFirstname() + ";",
                            "Επιβεβαίωση Διαγραφής",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null, //do not use a custom Icon
                            options, //the titles of buttons
                            options[1]); //default button title
                    if (n == 0) {
                        localEm.getTransaction().begin();
                        try {
                            Query q = localEm.createQuery("DELETE FROM Artist art WHERE art.artistid=:artistID ",
                                    Artist.class).setParameter("artistID", a.getArtistid());
                            q.executeUpdate();
                            localEm.getTransaction().commit();
                            artistList.remove(selectedIndex);
                            artistTable.updateUI();
                        } catch (Exception e) {
                            e.printStackTrace();
                            localEm.getTransaction().rollback();
                        }
                    }
                } else {
                    Object[] options = {"ΟΚ"};
                    int n = JOptionPane.showOptionDialog(new JFrame(),
                            "Ο καλλιτέχνης συμμετέχει σε συγκρότημα \n"
                            + "πρέπει πρώτα να διαγραφεί απο αυτό",
                            "Διαγραφή Καλλιτέχνη",
                            JOptionPane.NO_OPTION,
                            JOptionPane.INFORMATION_MESSAGE,
                            null, //do not use a custom Icon
                            options, //the titles of buttons
                            options[0]); //default button title
                }
            } else {
                if (a.getMusicgroupList().isEmpty()) {
                    Object[] options = {"ΟΚ"};
                    int n = JOptionPane.showOptionDialog(new JFrame(),
                            "Υπάρχει άλμπουμ για τον συγκεκριμένο καλλιτέχνη \n"
                            + "πρέπει πρώτα να διαγραφεί αυτό",
                            "Διαγραφή Καλλιτέχνη",
                            JOptionPane.NO_OPTION,
                            JOptionPane.INFORMATION_MESSAGE,
                            null, //do not use a custom Icon
                            options, //the titles of buttons
                            options[0]); //default button title
                } else {
                    Object[] options = {"ΟΚ"};
                    int n = JOptionPane.showOptionDialog(new JFrame(),
                            "Ο καλλιτέχνης συμμετέχει σε συγκρότημα  και\n"
                            + "υπάρχει άλμπουμ για τον συγκεκριμένο καλλιτέχνη \n"
                            + "πρέπει πρώτα να διαγραφεί το άλμπουμ και να διαγραφεί απο το συγκρότημα",
                            "Διαγραφή Καλλιτέχνη",
                            JOptionPane.NO_OPTION,
                            JOptionPane.INFORMATION_MESSAGE,
                            null, //do not use a custom Icon
                            options, //the titles of buttons
                            options[0]); //default button title
                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(new JFrame(), e.getMessage());
        }

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void backButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        controller.switchToPanel(MainFrameController.PanelType.ROOT_MENU);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private List<Artist> artistList;
    private Query artistQuery;
    private JTable artistTable;
    private JButton backButton;
    private JPanel buttonPanel;
    private JButton deleteButton;
    private JButton editButton;
    private JLabel headerLabel;
    private JScrollPane jScrollPane2;
    private EntityManager localEm;
    private JButton newButton;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    //
    // Ο δικός μας κώδικας αρχίζει εδώ, για να είναι
    // εμφανώς διαχωρισμένος από τον αυτόματα δημιουργούμενο
    //
    private MainFrameController controller;
    private EntityManager em;

    public ArtistTablePanel(MainFrameController controller, EntityManager em) {
        this.controller = controller;
        this.em = em;
        initComponents();

        // Καθορισμός εμφάνισης πίνακα
        TableColumnModel tcm = artistTable.getColumnModel();
        for (int i = 0; i < tcm.getColumnCount(); i++) {
            switch (i) {
                case 3:
                    tcm.getColumn(i).setCellRenderer(TableCellRendererFactory.getTableCellRenderer(TableCellRendererFactory.RendererType.SEX));
                    break;
                default:
                    tcm.getColumn(i).setCellRenderer(TableCellRendererFactory.getTableCellRenderer(TableCellRendererFactory.RendererType.GENERIC));
                    break;
            }
        }
    }
}
